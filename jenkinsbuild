#!/bin/sh

set -o monitor
set -o nounset
set -o noglob

main () {
    #
    # CONFIGURATIONS START
    #
    local JENKINS_URL=${JENKINS_URL-}
    local JENKINS_USER=${JENKINS_USER-}
    local JENKINS_TOKEN=${JENKINS_TOKEN-}
    local JENKINS_JOB_NAME=${JENKINS_JOB_NAME-}
    local JENKINS_SRC_DIR=${JENKINS_SRC_DIR-'.'}
    #
    # CONFIGURATIONS END
    #
    local daemon_only= commitish=
    local with_param=${JENKINS_WITH_PARAMETER:-0}
    local no_with_param=0
    local version="0.14.0"
    local lupdate="2023-12-15"
    local want_value=
    local stop_parsing=
    ReadJobNameFromGitConfig
    for arg in "$@"
    do
        case $want_value,$stop_parsing,$arg in
        ,,-j|,,--job)
            want_value=$arg
            ;;
        ,,-p|,,--parameter)
            want_value=$arg
            ;;
        ,,-d|,,--daemon-only)
            daemon_only=1
            ;;
        ,,-k|,,--kill-daemon)
            KillDaemon
            exit
            ;;
        ,,-w|,,--with-parameter)
            with_param=1
            no_with_param=0
            ;;
        ,,-n|,,--no-with-parameter)
            no_with_param=1
            ;;
        ,,-h|,,-\?|,,--help)
            ShowHelp
            printf "\n"
            ShowVersion
            exit 0
            ;;
        ,,--version)
            ShowVersion
            exit 0
            ;;
        ,,--)
            stop_parsing=1
            ;;
        ,,-*)
            err "invalid switch \`$1'"
            ;;
        ,,*)
            if ! test "$commitish"
            then
                commitish=$arg
            else
                set -- "$@" "$arg"
            fi
            ;;
        ,*,*)
            set -- "$@" "$arg"
            ;;
        *,*,*)
            case $want_value in
            -p|--parameter)
                set -- "$@" "$arg"
                ;;
            -j|--job)
                JENKINS_JOB_NAME=$arg
                ;;
            *)
                >&2 printf "warning: invalid want_value \`%s'\n" "$arg"
                ;;
            esac
            want_value=
            ;;
        esac
        shift
    done
    test ! "$want_value" || err "switch \`$want_value' requires a value"
    GitDaemon || return
    DetectWithParameter "$@"
    CallApi "$@"
}

ReadJobNameFromGitConfig () {
    local url user token jobname srcdir withParameter
    git rev-parse 2>/dev/null || return
    url=$(git config --local --get jenkinsbuild.url 2>/dev/null) && JENKINS_URL=$url
    user=$(git config --local --get jenkinsbuild.user 2>/dev/null) && JENKINS_USER=$user
    token=$(git config --local --get jenkinsbuild.token 2>/dev/null) && JENKINS_TOKEN=$token
    jobname=$(git config --local --get jenkinsbuild.job 2>/dev/null) && JENKINS_JOB_NAME=$jobname
    srcdir=$(git config --local --get jenkinsbuild.srcdir 2>/dev/null) && JENKINS_SRC_DIR=$srcdir
    withParameter=$(git config --local --get jenkinsbuild.withParameter 2>/dev/null) && JENKINS_WITH_PARAMETER=$withParameter
}

DaemonExists () {
    ps -afW | grep -q 'git-daemon\.exe'
}

KillDaemon () {
    git config --global --unset jenkinsbuild.lastDaemonDir
    git config --global --unset jenkinsbuild.lastDaemonShellPid
    DaemonExists || return 0
    taskkill //f //im git-daemon.exe 1>/dev/null
}

GitDaemon () {
    local toplevel last_daemon_dir last_daemon_shell_pid
    (
        cd "$JENKINS_SRC_DIR" || return
        toplevel=$(git rev-parse --show-toplevel 2>/dev/null) || toplevel="."
        (
            cd "$toplevel" || return
            type cygpath >/dev/null 2>&1 &&
                last_daemon_dir=$(git config --global --get jenkinsbuild.lastDaemonDir) &&
                last_daemon_shell_pid=$(git config --global --get jenkinsbuild.lastDaemonShellPid) &&
                test "$(cygpath -u "$last_daemon_dir")" = "$(cygpath -u "$PWD")" &&
                test "$last_daemon_shell_pid" = "$PPID" &&
                return
            KillDaemon || return
            GitDaemonStart
        )
    ) || return
    test "$daemon_only" && exit
    return 0
}

GitDaemonStart () {
    git config --global jenkinsbuild.lastDaemonDir "$PWD"
    git config --global jenkinsbuild.lastDaemonShellPid "$PPID"
    git daemon \
        --export-all \
        --enable=upload-archive \
        --base-path=. &
}

DetectWithParameter () {
    test ! "$*" && return
    if test ! "$no_with_param" -eq 0
    then
        >&2 printf "warining: \`--no-with-parameter' present, parameters provided but ignored\n"
        return 0
    fi
    with_param=1
}

CallApi () {
    local api="build" commitish_parsed
    local commitish_arg=
    test "$JENKINS_USER" &&
        test "$JENKINS_TOKEN" &&
        test "$JENKINS_URL" &&
        test "$JENKINS_JOB_NAME" ||
        err "JENKINS_USER, JENKINS_TOKEN, JENKINS_URL, or JENKINS_JOB_NAME undefined" \
        "Try 'jenkinsbuild --help' for more information."
    if ! test "$with_param" -eq 0
    then
        api="buildWithParameters"
        for parameter in "$@"
        do
            set -- "$@" "--data" "$parameter"
            shift
        done
    fi
    if git rev-parse 2>/dev/null
    then
        commitish_parsed=$(git rev-parse --verify "${commitish:-HEAD}") ||
            err "failed to parse commitish \`$commitish'"
        commitish_arg="--data commitish=$commitish_parsed"
    fi
    curl --silent --show-error --request POST \
        --user "$JENKINS_USER:$JENKINS_TOKEN" \
        "$JENKINS_URL/job/$JENKINS_JOB_NAME/$api" \
        $commitish_arg \
        "$@"
}

ShowHelp () {
cat <<EOF
usage: jenkinsbuild [<option> ...] [<commitish>] [--] [<parameter>=<value>...]

Build <commitish> in a specific Jenkins job. <commitish>, if not specified,
is HEAD, i.e. current checked out commit.

options:
    -j, --job JOB               specify Jenkins job name to \`JOB' for this
                                 build only
    -d, --daemon-only           start git-daemon only
    -k, --kill-daemon           kill git-daemon and exit
    -w, --with-parameter        for Jenkins jobs having parameters
    -n, --no-with-parameter     for Jenkins jobs not having parameters; this
                                 is the default, but you can set environment
                                 variable JENKINS_WITH_PARAMETER, or git config
                                 --local jenkinsbuild.withParameter, to 1 to
                                 set --with-parameter as the default
    -p, --parameter             specify build parameters; this implies
                                 --with-parameter; this option can be used
                                 multiple times to specify more than one
                                 parameters

Following steps are required to be done before first use.
    1. In the Jenkins job, set git branch to build to \`jenkinsbuild'.
    2. Set following environment variables.
        JENKINS_URL: Jenkins URL such as \`http://example.com:8080', can also
                     be defined by \`git config --local jenkinsbuild.url'
        JENKINS_USER: Jenkins user name, can also be defined by \`git config
                      --local jenkinsbuild.user'
        JENKINS_TOKEN: API token of JENKINS_USER, can also be defined by \`git
                       config --local jenkinsbuild.token'
        JENKINS_JOB_NAME: Name of job to build when --job is not specified, can
                          also be defined by \`git config --local
                          jenkinsbuild.job'
        JENKINS_SRC_DIR: Path to the source code directory, can also be defined
                         by \`git config --local jenkinsbuild.srcdir'

Git local configurations, if defined, override environment variables, but would
be overridden by switches specified in command line.
EOF
}

ShowVersion () {
cat <<EOF
jenkinsbuild $version : $lupdate : Liu, Zhao-hui <liuzhaohui@ieisystem.com>
https://github.com/lxvs/jenkinsbuild
EOF
}

err () {
    >&2 printf "error: %s\n" "$1"
    shift
    test $# -gt 0 && >&2 printf "%s\n" "$@"
    exit 1
}

main "$@"
